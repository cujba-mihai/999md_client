@use 'sass:math';

@mixin breakpoint-max($bp) {
  @media (max-width: $bp) {
      @content;
  }
}

@mixin breakpoint-min($bp) {
  @media (min-width: $bp) {
      @content;
  }
}

@mixin center($axis: "both") {
  @if $axis == "both" or $axis == "vertical" {
    top: 50%;
  }
  @if $axis == "both" or $axis == "horizontal" {
    left: 50%;
  }
  transform: 
    if($axis == "horizontal", translateX(-50%), if($axis == "both", translateX(-50%), null))
    if($axis == "vertical", translateY(-50%), if($axis == "both", translateY(-50%), null))
  ;
}

@mixin triangle($direction: "bottom", $color: black, $size: 10px 8px) {
  @if index($list-of-directions, $direction) {
    @if __isColor($color){
      content: "";
      height: 0;
      width: 0;
      display: inline-block;
      border-style: solid;
      @if $direction == "top"{
        border-color: transparent transparent $color;
        border-width: 0 math.div(nth($size, 1), 2) if(length($size) == 2, nth($size, 2), nth($size, 1));
      } @else if $direction == "top-right" {
        border-color: transparent $color transparent transparent;
        border-width: 0 nth($size, 1) nth($size, 1) 0;
      } @else if $direction == "right" {
        border-color: transparent transparent transparent $color;
        border-width: math.div(if(length($size) == 2, nth($size, 2), nth($size, 1)),  2) 0 math.div(if(length($size) == 2, nth($size, 2), nth($size, 1)), 2) nth($size, 1);
      } @else if $direction == "bottom-right" {
        border-color: transparent transparent $color;
        border-width: 0 0 nth($size, 1) nth($size, 1);
      } @else if $direction == "bottom" {
        border-color: $color transparent transparent;
        border-width: if(length($size) == 2, nth($size, 2), nth($size, 1)) math.div(nth($size, 1), 2) 0;
      } @else if $direction == "bottom-left" {
        border-color: transparent transparent transparent $color;
        border-width: nth($size, 1) 0 0 nth($size, 1);
      } @else if $direction == "left" {
        border-color: transparent $color transparent transparent;
        border-width: math.div(if(length($size) == 2, nth($size, 2), nth($size, 1)), 2) nth($size, 1) math.div(if(length($size) == 2, nth($size, 2), nth($size, 1)), 2) 0;
      } @else if $direction == "top-left" {
        border-color: $color transparent transparent;
        border-width: nth($size, 1) nth($size, 1) 0 0;
      }
      @content;
    }
  } @else {
    @error "The argument for direction must be one of the followings: #{quote($list-of-directions)}";
  }
}

@mixin stretched-link($value: "before") {
  @if index("before" "after", $value) {
    &#{"::" + $value} {
      content: "";
      position: absolute;
      pointer-events: auto;
      background-color: rgba(0, 0, 0, 0);
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 1;
    }
  } @else {
    @error "'#{$value}' is a wrong argument. This mixin accepts 'before' or 'after' as an argument. If you don't pass any argument default it will target the '::before' pseudo-element of the selected element.";
  }
}

@mixin round-borders($radius: 4px) {
  border: none;
  border-radius: $radius;
}

@mixin center-page {
  @include span-page-grid($center: true);
}

@mixin full-width {
  min-width: 100%;
  max-width: 100%;
}

@mixin full-height {
  min-height: 100%;
  max-height: 100%;
}

@mixin fill-container {
  @include full-height();
  @include full-width();
}

@mixin padding-main($padding: 15px) {
  padding: $padding;
}

@mixin label($top: 0, $left: 0) {
  position: absolute;
  top: $top;
  left: $left;
  padding: 0 5px;
  background: $color-white;
  color: $color-darker-gray;

  font-size: 16px;
  font-weight: 700;
  line-height: 18px;
}

@mixin main-content-container() {
  @include fill-container;
  @include round-borders;
  @include padding-main;

  position: relative;
  border: 1px solid $border-light-gray;
  line-height: 1.4 !important;
}

@mixin title(
  $font-size: 20px,
  $font-weight: 700,
  $line-height: 2rem,
  $padding: 11px 0 0
) {
  font-size: $font-size;
  font-weight: $font-weight;
  line-height: $line-height;
  color: $color-darker-gray;
  padding: $padding;
  display: inline-block;
  width: fit-content;
}

@mixin page-layout(
  $grid-template-columns: auto minmax(320px, 1000px) auto,
  $grid-template-rows: repeat(auto-fit, minmax(60px, 1fr)),
  $grid-auto-columns: auto minmax(320px, 1000px) auto,
  $grid-auto-rows: auto,
  $grid-auto-flow: column,
  $padding: 0
) {
  display: grid;
  grid-template-columns: $grid-template-columns;
  grid-template-rows: $grid-template-rows;
  grid-auto-columns: $grid-auto-columns;
  grid-auto-rows: $grid-auto-rows;
  grid-auto-flow: $grid-auto-flow;
  padding: $padding;
}

@mixin span-page-grid($center: false) {
  @if ($center) {
    grid-column: 2 / span 1;
  } @else {
    grid-column: 1/-1;
  }
}

@mixin regular-button(
  $border-color: #73b222,
  $color: #73b222,
  $background-color: #73b222
) {
  background-color: transparent;
  border: 1px solid $border-color;
  color: $color;
  width: 190px;
  min-height: 35px;
  max-height: 35px;
  border-radius: 4px;
  cursor: pointer;
  min-width: 150px;
  outline: none;
  & > * {
    font-size: 15px;
  }

  &:hover {
    color: $color-white;
    background-color: $background-color;
  }
}

@mixin icon-button(
  $background: $color-white,
  $border-color: #006bb8,
  $color: #0058c5,
  $icon-position: true
) {
  display: grid;
  background-color: $background-light-gray;

  @if ($icon-position) {
    grid-template-columns: 30% 70%;
  } @else {
    grid-template-columns: 80% 20%;

    & > span {
      grid-column: 1 / span 1;
      grid-row: 1;
    }

    & > img {
      grid-column: 2 / span 1;
      grid-row: 1;
    }
  }

  justify-content: center;
  align-items: center;
  max-width: 180px;
  min-height: 35px;
  max-height: 35px;
  border-radius: 4px;
  font-size: 15px;
  cursor: pointer;
  border: 1px solid $border-color;
  color: $border-color;
  place-items: center;

  &:hover {
    background-color: #e8f1fc;
    border-color: #e8f1fc;
  }
}
